#! /usr/bin/python3

import requests
import json
import time
import random
import sys
import os
import collections
import argparse
import subprocess
from datetime import datetime
from MySQLdb import _mysql
from MySQLdb.constants import FIELD_TYPE
import MySQLdb.converters

from yahooquery import Ticker

parser = argparse.ArgumentParser(description='Get price from yahoo web')
parser.add_argument("-v", '--verbose', action="store_true")
parser.add_argument("-t", '--ticker', help='Ticker to pull in')
parser.add_argument("-D",
                    '--debug',
                    help='Show more output',
                    action="store_true")
args = parser.parse_args()

REQUIRED_PROPERTIES = [
    "currency", "marketState", "regularMarketTime", "regularMarketPrice"
]


def have_required_fields(price):
    """ does the {price} object have all the [REQUIRED_PROPERTIES] """
    for req in REQUIRED_PROPERTIES:
        if req not in price:
            return False
    return True


def convert_string(data):
    if isinstance(data, bytes):
        return data.decode("utf8")
    return data


my_conv = MySQLdb.converters.conversions.copy()
my_conv[FIELD_TYPE.VARCHAR] = convert_string
my_conv[FIELD_TYPE.CHAR] = convert_string
my_conv[FIELD_TYPE.STRING] = convert_string
my_conv[FIELD_TYPE.VAR_STRING] = convert_string


def mysql_connect():
    """ Connect to MySQL based on ENV vars """
    sock = "/tmp/mysql.sock"
    host = None
    port = None
    if "MYSQL_CONNECT" in os.environ:
        conn = os.environ["MYSQL_CONNECT"]
        if conn.find("/") >= 0:
            sock = conn
        else:
            host = conn
            port = 3306
            if conn.find(":") >= 0:
                svr = conn.split(":")
                host = svr[0]
                port = int(svr[1])

    return _mysql.connect(
        user=os.environ["MYSQL_USERNAME"],
        password=os.environ["MYSQL_PASSWORD"],
        unix_socket=sock,
        host=host,
        port=port,
        database=os.environ["MYSQL_DATABASE"],
        conv=my_conv,
        charset='utf8mb4',
        init_command='SET NAMES UTF8',
    )


def get_prices(ticker):
    try:
        tickers = Ticker(ticker)
        return tickers.quotes
    except Exception as exc:
        return None
    return None

def get_val_dtm(price):
    """ Extract numeric price & time stamp from {price} object """
    val = price["regularMarketPrice"]
    if "currency" in price and price["currency"] == "GBp" and val > 5:
        val = val / 100
        price["currency"] = "GBP"

    dtm = datetime.utcfromtimestamp(
        price["regularMarketTime"]).strftime('%Y-%m-%d %H:%M:%S')
    return val, dtm


if args.ticker is not None:
    store = get_prices(args.ticker)
    for ticker in store:
        print(ticker,get_val_dtm(store[ticker]),have_required_fields(store[ticker]))
    if args.verbose and args.ticker in store:
        print(json.dumps(store[args.ticker],indent=3))
    sys.exit(0)


class OneTicker:
    def __init__(self,ticker):
        self.ticker = ticker.upper()
        self.next_update = None
        self.price = None
        self.source = None
        self.schedule_next()

    def get_latest_prices(self):
        prices = get_prices(self.ticker)
        if prices is not None and self.ticker in prices and have_required_fields(prices[self.ticker]):
            self.schedule_next()
            self.prices = prices
            return True

        self.update_failed()
        return False

    def update_failed(self):
        self.next_update = int(time.time()) + random.randint(5,10)

    def found_price(self,price,source):
        self.price = price
        self.source = source
        self.next_update = int(time.time()) + 999999

    def schedule_next(self):
        self.next_update = int(time.time()) + random.randint(5,45)


def find_next(tickers):
    lowest = tickers[list(tickers)[0]]
    now = int(time.time())
    for __, tickobj in tickers.items():
        if tickobj.next_update < lowest.next_update:
            lowest = tickobj
    return lowest if lowest.next_update < now else None


def record_price(ticker,this_price):
    val, dtm = get_val_dtm(this_price)
    log_line = f"[{ticker}] -> {dtm} -> {val} -> {this_price['currency']} {this_price['marketState']}"
    print(log_line)
    sys.stdout.flush()

    sql = "insert into spot_prices(batch,ticker,when_dt,price,currency,market_state)"
    sql = sql + f"values('{batch}','{ticker}','{dtm}',{val},'{this_price['currency']}','{this_price['marketState']}')"

    if not args.debug:
        cnx.query(sql)
    else:
        print(sql)


cnx = mysql_connect()

cnx.query("select ticker from tickers")
res = cnx.store_result()
ret = res.fetch_row(maxrows=0, how=1)

tick_list = [ t["ticker"].upper() for t in ret ]

batch = datetime.utcfromtimestamp(int(
    time.time())).strftime('%Y-%m-%d %H:%M:%S')

tickers = Ticker(tick_list)
for each_tick in tick_list:
	if have_required_fields(tickers.quotes[each_tick]):
		record_price(each_tick,tickers.quotes[each_tick])

sys.exit(0)

while number_left() > 0:
    next_to_update = find_next(tickers)
    if next_to_update is not None and next_to_update.get_latest_prices():
        for priced_item in next_to_update.prices:
            if priced_item in tickers and tickers[priced_item].price is None and have_required_fields(next_to_update.prices[priced_item]):
                tickers[priced_item].found_price(next_to_update.prices[priced_item],next_to_update.ticker)
                record_price(priced_item,next_to_update.ticker,next_to_update.prices[priced_item])
    time.sleep(3)
