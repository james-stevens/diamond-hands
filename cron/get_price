#! /usr/bin/python3

import requests
import json
import time
import sys
import os
import collections
import argparse
import subprocess
from datetime import datetime
from MySQLdb import _mysql
from MySQLdb.constants import FIELD_TYPE
import MySQLdb.converters

import localyf as yf


parser = argparse.ArgumentParser(description='Get price from yahoo web')
parser.add_argument("-t", '--ticker', help='Ticker to pull in')
parser.add_argument("-D",
                    '--debug',
                    help='Show more output',
                    action="store_true")
args = parser.parse_args()

REQUIRED_PROPERTIES = [
    "currency", "marketState", "regularMarketTime", "regularMarketPrice"
]


def have_required_fields(price):
    """ does the {price} object have all the [REQUIRED_PROPERTIES] """
    for req in REQUIRED_PROPERTIES:
        if req not in price:
            return False
    return True


def convert_string(data):
    if isinstance(data, bytes):
        return data.decode("utf8")
    return data


my_conv = MySQLdb.converters.conversions.copy()
my_conv[FIELD_TYPE.VARCHAR] = convert_string
my_conv[FIELD_TYPE.CHAR] = convert_string
my_conv[FIELD_TYPE.STRING] = convert_string
my_conv[FIELD_TYPE.VAR_STRING] = convert_string


def mysql_connect():
    """ Connect to MySQL based on ENV vars """
    sock = "/tmp/mysql.sock"
    host = None
    port = None
    if "MYSQL_CONNECT" in os.environ:
        conn = os.environ["MYSQL_CONNECT"]
        if conn.find("/") >= 0:
            sock = conn
        else:
            host = conn
            port = 3306
            if conn.find(":") >= 0:
                svr = conn.split(":")
                host = svr[0]
                port = int(svr[1])

    return _mysql.connect(
        user=os.environ["MYSQL_USERNAME"],
        password=os.environ["MYSQL_PASSWORD"],
        unix_socket=sock,
        host=host,
        port=port,
        database=os.environ["MYSQL_DATABASE"],
        conv=my_conv,
        charset='utf8mb4',
        init_command='SET NAMES UTF8',
    )


def get_prices(ticker):
    tick = yf.Ticker(ticker)
    info = tick.info
    print(tick._quote.all)
    return tick._quote._all["StreamDataStore"]["quoteData"]

def get_val_dtm(price):
    """ Extract numeric price & time stamp from {price} object """
    val = price["regularMarketPrice"]
    if "currency" in price and price["currency"] == "GBp" and val > 5:
        val = val / 100
        price["currency"] = "GBP"

    dtm = datetime.utcfromtimestamp(
        price["regularMarketTime"]).strftime('%Y-%m-%d %H:%M:%S')
    return val, dtm


if args.ticker is not None:
    js = get_prices(args.ticker)
    for ticker in js:
        print(ticker,get_val_dtm(js[ticker]),have_required_fields(js[ticker]))
    sys.exit(0)

cnx = mysql_connect()

cnx.query("select ticker from tickers")
res = cnx.store_result()
ret = res.fetch_row(maxrows=0, how=1)
tickers = {t["ticker"]: None for t in ret}

batch = datetime.utcfromtimestamp(int(
    time.time())).strftime('%Y-%m-%d %H:%M:%S')

for ticker in [t for t in tickers]:
    if tickers[ticker] is not None:
        continue

    prices = get_prices(ticker)
    if prices is None:
        prices = get_prices(ticker)

    for price in prices:
        if price not in tickers or tickers[price] is not None:
            continue

        if not have_required_fields(prices[price]):
            continue

        this_price = prices[price]
        tickers[price] = this_price

        val, dtm = get_val_dtm(this_price)
        print("[", ticker, "] ->", price, "->", dtm, "->", val, "->",
              this_price["currency"], this_price["marketState"])
        sys.stdout.flush()

        sql = "insert into spot_prices(batch,ticker,when_dt,price,currency,market_state)"
        sql = sql + "values(\"{batch}\",\"{ticker}\",\"{datetime}\",{price},\"{cur}\",\"{mktopen}\")".format(
            batch=batch,
            ticker=price,
            datetime=dtm,
            price=val,
            cur=this_price["currency"],
            mktopen=this_price["marketState"])

        if not args.debug:
            cnx.query(sql)

cnx.close()
