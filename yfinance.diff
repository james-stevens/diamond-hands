Only in localyf/: __pycache__
diff -r ../../yfinance/yfinance/base.py localyf/base.py
57a58
>         self._all = None
diff -r ../../yfinance/yfinance/data.py localyf/data.py
49c49
< def decrypt_cryptojs_aes(data):
---
> def decrypt_cryptojs_aes_stores(data):
51,52d50
<     _cs = data["_cs"]
<     _cr = data["_cr"]
54,55c52,62
<     _cr = b"".join(int.to_bytes(i, length=4, byteorder="big", signed=True) for i in json.loads(_cr)["words"])
<     password = hashlib.pbkdf2_hmac("sha1", _cs.encode("utf8"), _cr, 1, dklen=32).hex()
---
>     if "_cs" in data and "_cr" in data:
>         _cs = data["_cs"]
>         _cr = data["_cr"]
>         _cr = b"".join(int.to_bytes(i, length=4, byteorder="big", signed=True) for i in json.loads(_cr)["words"])
>         password = hashlib.pbkdf2_hmac("sha1", _cs.encode("utf8"), _cr, 1, dklen=32).hex()
>     else:
>         try:
>             password_key = next(key for key in data.keys() if key not in ["context", "plugins"])
>         except:
>             return None
>         password = data[password_key]
179,184c186,192
<         if "_cs" in data and "_cr" in data:
<             data = decrypt_cryptojs_aes(data)
< 
<         if "context" in data and "dispatcher" in data["context"]:
<             # Keep old code, just in case
<             data = data['context']['dispatcher']['stores']
---
>         stores = decrypt_cryptojs_aes_stores(data)
>         if stores is None:
>             # Maybe Yahoo returned old format, not encrypted
>             if "context" in data and "dispatcher" in data["context"]:
>                 stores = data['context']['dispatcher']['stores']
>         if stores is None:
>             raise Exception(f"{self.ticker}: Failed to extract data stores from web request")
187c195
<         new_data = json.dumps(data).replace('{}', 'null')
---
>         new_data = json.dumps(stores).replace('{}', 'null')
Only in localyf/scrapers: __pycache__
diff -r ../../yfinance/yfinance/scrapers/quote.py localyf/scrapers/quote.py
19a20
>         self._all = None
32a34,41
>     def all(self) -> dict:
>         if self._all is None:
>             self._scrape(self.proxy)
>             self._scrape_complementary(self.proxy)
> 
>         return self._all
> 
>     @property
56a66
>         self._all = json_data
61d70
<             print('- %s: %s' % (self._data.ticker, err_msg))
111a121,132
>         except Exception:
>             pass
> 
>         try:
>             self._info['regularMarketTime'] = quote_summary_store.get('price', {}).get(
>                 'regularMarketTime', self._info.get('regularMarketTime', None))
>         except Exception:
>             pass
> 
>         try:
>             self._info['marketState'] = quote_summary_store.get('price', {}).get(
>                 'marketState', self._info.get('marketState', None))
